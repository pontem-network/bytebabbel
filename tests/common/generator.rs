use move_binary_format::file_format::{
    Bytecode, ConstantPoolIndex, FieldHandleIndex, FieldInstantiationIndex, FunctionHandleIndex,
    FunctionInstantiationIndex, SignatureIndex, StructDefInstantiationIndex, StructDefinitionIndex,
};
use rand::random;

pub fn rand_opcode() -> Bytecode {
    match random::<u8>() {
        0 => Bytecode::Pop,
        1 => Bytecode::Ret,
        2 => Bytecode::BrTrue(random()),
        3 => Bytecode::BrFalse(random()),
        4 => Bytecode::Branch(random()),
        5 => Bytecode::LdU8(random()),
        6 => Bytecode::LdU64(random()),
        7 => Bytecode::LdU128(random()),
        8 => Bytecode::CastU8,
        9 => Bytecode::CastU64,
        10 => Bytecode::CastU128,
        11 => Bytecode::LdConst(ConstantPoolIndex(random())),
        12 => Bytecode::LdTrue,
        13 => Bytecode::LdFalse,
        14 => Bytecode::CopyLoc(random()),
        15 => Bytecode::MoveLoc(random()),
        16 => Bytecode::StLoc(random()),
        17 => Bytecode::Call(FunctionHandleIndex(random())),
        18 => Bytecode::CallGeneric(FunctionInstantiationIndex(random())),
        19 => Bytecode::Pack(StructDefinitionIndex(random())),
        20 => Bytecode::PackGeneric(StructDefInstantiationIndex(random())),
        21 => Bytecode::Unpack(StructDefinitionIndex(random())),
        22 => Bytecode::UnpackGeneric(StructDefInstantiationIndex(random())),
        23 => Bytecode::ReadRef,
        24 => Bytecode::WriteRef,
        25 => Bytecode::FreezeRef,
        26 => Bytecode::MutBorrowLoc(random()),
        27 => Bytecode::ImmBorrowLoc(random()),
        28 => Bytecode::MutBorrowField(FieldHandleIndex(random())),
        29 => Bytecode::MutBorrowFieldGeneric(FieldInstantiationIndex(random())),
        30 => Bytecode::ImmBorrowField(FieldHandleIndex(random())),
        31 => Bytecode::ImmBorrowFieldGeneric(FieldInstantiationIndex(random())),
        32 => Bytecode::MutBorrowGlobal(StructDefinitionIndex(random())),
        33 => Bytecode::MutBorrowGlobalGeneric(StructDefInstantiationIndex(random())),
        34 => Bytecode::ImmBorrowGlobal(StructDefinitionIndex(random())),
        35 => Bytecode::ImmBorrowGlobalGeneric(StructDefInstantiationIndex(random())),
        36 => Bytecode::Add,
        37 => Bytecode::Sub,
        38 => Bytecode::Mul,
        39 => Bytecode::Mod,
        40 => Bytecode::Div,
        41 => Bytecode::BitOr,
        42 => Bytecode::BitAnd,
        43 => Bytecode::Xor,
        44 => Bytecode::Or,
        45 => Bytecode::And,
        46 => Bytecode::Not,
        47 => Bytecode::Eq,
        48 => Bytecode::Neq,
        49 => Bytecode::Lt,
        50 => Bytecode::Gt,
        51 => Bytecode::Le,
        52 => Bytecode::Ge,
        53 => Bytecode::Abort,
        54 => Bytecode::Nop,
        55 => Bytecode::Exists(StructDefinitionIndex(random())),
        56 => Bytecode::ExistsGeneric(StructDefInstantiationIndex(random())),
        57 => Bytecode::MoveFrom(StructDefinitionIndex(random())),
        58 => Bytecode::MoveFromGeneric(StructDefInstantiationIndex(random())),
        59 => Bytecode::MoveTo(StructDefinitionIndex(random())),
        60 => Bytecode::MoveToGeneric(StructDefInstantiationIndex(random())),
        61 => Bytecode::Shl,
        62 => Bytecode::Shr,
        63 => Bytecode::VecPack(SignatureIndex(random()), random()),
        64 => Bytecode::VecLen(SignatureIndex(random())),
        65 => Bytecode::VecImmBorrow(SignatureIndex(random())),
        66 => Bytecode::VecMutBorrow(SignatureIndex(random())),
        67 => Bytecode::VecPushBack(SignatureIndex(random())),
        68 => Bytecode::VecPopBack(SignatureIndex(random())),
        69 => Bytecode::VecUnpack(SignatureIndex(random()), random()),
        70 => Bytecode::VecSwap(SignatureIndex(random())),
        _ => Bytecode::Pop,
    }
}
